{{$embeddedDB := and (eq .Values.db.external.enabled false) (eq .Values.db.embedded.persist true)  }}
---
apiVersion: apps/v1
{{- if $embeddedDB}}
kind: StatefulSet
{{- else }}
kind: Deployment
{{- end }}
metadata:
  name: {{ include "config-db.name" . }}
  labels: {{- include "config-db.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.replicas }}
  selector:
    matchLabels: {{- include "config-db.selectorLabels" . | nindent 6 }}
  {{- if $embeddedDB }}
  serviceName: {{ include "config-db.name" . }}
  volumeClaimTemplates:
    - metadata:
        name: config-db-embedded-database
        labels:
          {{- include "config-db.labels" . | nindent 10 }}
      spec:
        {{- if not (eq .Values.db.embedded.storageClass "") }}
        storageClassName: {{ .Values.db.embedded.storageClass }}
        {{- end }}
        accessModes: ["ReadWriteOnce"]
        resources:
          requests:
            storage: {{ .Values.db.embedded.storage }}
  {{- end }}
  template:
    metadata:
      labels: {{- include "config-db.selectorLabels" . | nindent 8 }}
    spec:
      serviceAccountName: {{ template "config-db.serviceAccountName" . }}
      securityContext:
        fsGroup: 1000
      containers:
        - name: {{ include "config-db.name" . }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /live
              port: 8080
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /ready
              port: 8080
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          command:
            - /app/config-db
          args:
            - operator
            - -v
            - --disable-postgrest={{ .Values.disablePostgrest }}
            - --change-retention-days={{ .Values.configChangeRetentionDays }}
            - --analysis-retention-days={{ .Values.configAnalysisRetentionDays }}
            {{- if .Values.db.runMigrations}}
            - --db-migrations
            {{- end}}
          {{- if .Values.upstream.enabled}}
          envFrom:
            - secretRef:
                name: {{ .Values.upstream.secretKeyRef.name }}
          {{- end}}
          env:
            - name: DB_URL
              {{- if .Values.db.external.enabled}}
              valueFrom:
                secretKeyRef:
                  name: {{ if .Values.global.db.connectionPooler.enabled }}{{ .Values.global.db.connectionPooler.secretKeyRef.name }}{{ else }}{{ .Values.db.external.secretKeyRef.name }}{{ end }}
                  key: {{ if .Values.global.db.connectionPooler.enabled }}{{ .Values.global.db.connectionPooler.secretKeyRef.key }}{{ else }}{{ .Values.db.external.secretKeyRef.key }}{{ end }}
              {{- else}}
              value: "embedded:///opt/database"
              {{- end}}
            - name: NAMESPACE
              value: {{ .Values.namespace | default .Release.Namespace }}
            {{- if .Values.upstream.enabled}}
            - name: UPSTREAM_PAGE_SIZE
              value: '{{ .Values.upstream.pageSize }}'
            {{- end}}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          volumeMounts:
            {{- if $embeddedDB}}
            - name: config-db-embedded-database
              mountPath: "/opt/database"
            {{- end }}
      {{- with .Values.extra }}
      {{- toYaml . | nindent 6 }}
      {{- end }}
