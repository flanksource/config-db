# Default values for config-db.
# Declare variables to be passed into your templates.

global:
  db:
    connectionPooler:
      enabled: false
      secretKeyRef: 
        name: mission-control-connection-pooler
        key: DB_URL

replicas: 1

# Use this only if you want to replace the default that is .Chart.Name as the name of all the objects.
nameOverride: ''

# Set to true if you want to disable the postgrest service
disablePostgrest: false

image:
  repository: docker.io/flanksource/config-db
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: 'latest'

configChangeRetentionDays: 60
configAnalysisRetentionDays: 60

# a list of configmaps to load scrape rules from, the configmap should have a single entry called "config.yaml"
scrapeRuleConfigMaps:
  - config-db-rules

db:
  runMigrations: true
  embedded:
    # If the database is embedded, setting this to true will persist the contents of the database
    # through a persistent volume
    persist: true
    storageClass: ''
    storage: 20Gi
  external:
    # Setting enabled to true will use an external postgres DB.
    # You can either use the embedded db or an external db.
    # If both is enabled, then embedded db will take precedence.
    enabled: false
    # Setting create:true will create
    #   - a postgres stateful set
    #   - the secret &
    #   - the service to expose the postgres stateful set.
    # By default, the generated secret will use 'postgres' as the username and a randomly generated password.
    # If you need to set a custom username and password, you can populate a secret named 'postgres-connection' before install
    # with POSTGRES_USER and POSTGRES_PASSWORD
    #
    # If create:false, a preexisting secret containing the URI to an existing postgres database must be provided
    # The URI must be in the format 'postgresql://"$user":"$password"@"$host"/"$database"'
    create: false
    secretKeyRef:
      # The name of the secret to look for.
      name: config-db-postgresql
      # This is the key that we look for in the secret.
      key: DB_URL
    storageClass: ''
    storage: 20Gi

ingress:
  enabled: false
  annotations:
    {}
    #  kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  host: config-db.local
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources:
  requests:
    cpu: 200m
    memory: 1Gi
  limits:
    memory: 4Gi
    cpu: 500m

serviceAccount:
  create: true
  name: ''
  annotations: {}
  rbac:
    # Whether to create cluster-wide or namespaced roles
    clusterRole: true
    
    # for secret management with valueFrom
    tokenRequest: true
    secrets: true
    configmaps: true
    
    # for use with kubernetes resource lookups
    readAll: true
    
    # for kubernetesFile lookups
    exec: true

upstream:
  enabled: false
  secretKeyRef:
    name: config-db-upstream # Must contain: AGENT_NAME, UPSTREAM_USER, UPSTREAM_PASSWORD & UPSTREAM_HOST
  pageSize: 500

extra:
  {}
  # nodeSelector:
  #   key: value
  # tolerations:
  #   - key: "key1"
  #     operator: "Equal"
  #     value: "value1"
  #     effect: "NoSchedule"
  # affinity:
  #   nodeAffinity:
  #       requiredDuringSchedulingIgnoredDuringExecution:
  #         nodeSelectorTerms:
  #         - matchExpressions:
  #           - key: kubernetes.io/e2e-az-name
  #             operator: In
  #             values:
  #             - e2e-az1
  #             - e2e-az2
