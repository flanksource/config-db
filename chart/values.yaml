# Default values for config-db.
# Declare variables to be passed into your templates.
# yaml-language-server: $schema=./values.schema.json
global:
  imageRegistry: docker.io
  imagePrefix: flanksource
  labels: {}
  db:
    connectionPooler:
      enabled: false
      secretKeyRef:
        name: mission-control-connection-pooler
        key: DB_URL

replicas: 1

# Use this only if you want to replace the default that is .Chart.Name as the name of all the objects.
nameOverride: ""

# Set to true if you want to disable the postgrest service
disablePostgrest: false

image:
  name: "{{.Values.global.imagePrefix}}/config-db"
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: "latest"

configChangeRetentionDays: 60
configAnalysisRetentionDays: 60
serviceMonitor:
  enabled: true
  # @schema
  # additionalProperties: true
  # @schema
  labels: {}

logLevel: ""
jsonLogs: true

# command line arguments to config-db
extraArgs: {}

# environment variables to add e.g. GOMEMLIMIT
env: {}

# config-db properties to override
properties: {}

# @schema
# additionalProperties: false
# @schema
resources:
  requests:
    cpu: 200m
    memory: 1Gi
  limits:
    memory: 4Gi
    cpu: 500m

# a list of configmaps to load scrape rules from, the configmap should have a single entry called "config.yaml"
scrapeRuleConfigMaps:
  - config-db-rules

# @schema
# additionalProperties: false
# @schema
otel:
  # OpenTelemetry gRPC collector endpoint in host:port format
  collector: ""
  serviceName: config-db
  # labels in "a=b,c=d" format
  labels: ""

# @schema
# additionalProperties: false
# @schema
db:
  runMigrations: true
  # @schema
  # additionalProperties: false
  # @schema
  embedded:
    # If the database is embedded, setting this to true will persist the contents of the database
    # through a persistent volume
    persist: true
    storageClass: ""
    storage: 20Gi
  # @schema
  # additionalProperties: false
  # @schema
  external:
    # Setting enabled to true will use an external postgres DB.
    # You can either use the embedded db or an external db.
    # If both is enabled, then embedded db will take precedence.
    enabled: false
    # Setting create:true will create
    #   - a postgres stateful set
    #   - the secret &
    #   - the service to expose the postgres stateful set.
    # By default, the generated secret will use 'postgres' as the username and a randomly generated password.
    # If you need to set a custom username and password, you can populate a secret named 'postgres-connection' before install
    # with POSTGRES_USER and POSTGRES_PASSWORD
    #
    # If create:false, a preexisting secret containing the URI to an existing postgres database must be provided
    # The URI must be in the format 'postgresql://"$user":"$password"@"$host"/"$database"'
    create: false
    # @schema
    # additionalProperties: false
    # @schema
    secretKeyRef:
      # The name of the secret to look for.
      name: config-db-postgresql
      # This is the key that we look for in the secret.
      key: DB_URL
    storageClass: ""
    storage: 20Gi

# @schema
# additionalProperties: false
# @schema
ingress:
  enabled: false
  annotations:
    {}
    #  kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  host: config-db.local
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

# @schema
# additionalProperties: false
# @schema
serviceAccount:
  create: true
  name: config-db-sa
  annotations: {}
  # @schema
  # additionalProperties: false
  # @schema
  rbac:
    # Whether to create cluster-wide or namespaced roles
    clusterRole: true

    # for secret management with valueFrom
    tokenRequest: true
    secrets: true
    configmaps: true

    # for use with kubernetes resource lookups
    readAll: true

    # for kubernetesFile lookups
    exec: true

upstream:
  enabled: false
  secretKeyRef:
    name: config-db-upstream # Must contain: AGENT_NAME, UPSTREAM_USER, UPSTREAM_PASSWORD & UPSTREAM_HOST
  pageSize: 500

# Extra values to be applied to the pod spec
extra: {}

# @schema
# skipProperties: true
# @schema
podSecurityContext:
  fsGroup: 1000

securityContext: {}

# Additional volumes on the output Deployment definition.
volumes: []
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# Additional volumeMounts on the output Deployment definition.
volumeMounts: []
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true

nodeSelector: {}

tolerations: []

affinity: {}
